#+TITLE: Best Practices
#+DATE: [2018-12-12 Wed]
#+AUTHOR: Philipp Uhl

* Must Reads

- [[https://guides.github.com/introduction/git-handbook/][GitHub Guides - Git Handbook]]

* Git Commits Message Conventions

The git commit message is a single short (less than 50 character) line
summarizing the change, followed by a blank line. The subject should
start with a capital letter and should not end with dot. 

The message *has to be* in imperative form.

Use the following convention to start the subject of commit:
- Add :: Create a capability e.g. feature, test, dependency.
- Remove :: Remove a capability e.g. feature, test, dependency.
- Fix :: Fix an issue e.g. bug, typo, accident, misstatement.
- Bump :: Increase the version of something e.g. dependency.
- Change :: Change the build process, or tooling, or infra.
- Start :: Begin doing something; e.g. create a feature flag.
- End :: End doing something; e.g. remove a feature flag.
- Refactor :: A code change that MUST be just a refactoring.
- Reformat :: Refactor of formatting, e.g. omit whitespace.
- Optimize :: Refactor of performance, e.g. speed up code.
- Document :: Refactor of documentation, e.g. help files.

A properly formed Git commit subject line should always be able to
complete the following sentence: "if applied, this commit will <your
subject line here>". For example :

- If applied, this commit will "Remove unnecessary files"
- If applied, this commit will "Add grep option"
- If applied, this commit will "Fix error when protocol is missing"

If the your commit message can not be written like that because to
much is contained in the commit then *you have committed to
seldom. Fix your commits instead of your message.

** Body

Here you write what and why is changed. The body should not exceed 72
characters for a line. Not every commit has to have body.

** Last line

In the last line, add which issue the commit fixes or is related
to. This can be a link, number or if you use GitHub you can write it
as Resolves #N, where N is the issue ID.

Use the following convention to end the body of a commit:
- Resolves #N :: Resolves issue N

** Example

#+BEGIN_EXAMPLE
Fix error when protocol is missing

First, it checks if the protocol is set. If not, it changes the url and
add the basic http protocol on the beginning.
Second, it does a "preflight" request and follows all redirects and
returns the last URL. The process then continues with this URL.

Resolves #17
#+END_EXAMPLE

** Adapted from

- [[https://juffalow.com/other/write-good-git-commit-message][Write good git commit message]]
- [[https://news.ycombinator.com/item?id=18663032][Write good git commit message {hn}]]

* Contributing Conventions

- Discuss changes on the GitHub Issue tracker
- Make your PRs against the =master= branch
- Do clean changesets:
  - Focus on some topic, resist changing anything else
  - Do not do style changes mixed with functional changes
  - Try to avoid refactorings mixed with functional changes
  - If you need to fix something after commit/push
    - If there are ongoing reviews: talk to the reviewers and
      coordinate a fix
    - If there are no ongoing reviews or you did not push the bad
      commit yet: amend the commit to include your fix or merge the
      fixup commit before pushing
  - Have a nice, clear, typo-free commit comment
  - If you fixed an issue, refer to it in your commit comment
  - Follow the style guide (see below)
- If you write new code, please add tests and docs for it
- Run tests
  - Before every Push/PR
  - Make sure, branch coverage is 100% (except for extreme rare cases)
  - Fix upcoming issues
- Make a pull request on GitHub
- Wait for review by other developers

** Adapted from

[[https://borgbackup.readthedocs.io/en/stable/development.html#branching-model][Borg Development Guidelines]]

* Coding Conventions

In order to keep code clean, readable and uniform, some coding
conventions are needed. Most of them are covered by using
[[https://prettier.io/][Prettier]], use of which is mandatory.

*General:*
- Do *not* try to be fancy or clever: Keep it simple and easy to read
  #+BEGIN_QUOTE
  Debugging is twice as hard as writing the code in the first
  place. Therefore, if you write the code as cleverly as possible, you
  are, by definition, not smart enough to debug it.
  -- Brian Kernighan 
  #+END_QUOTE
- Code duplication should be avoided. If you deem it necessary in
  certain cases, leave a statement to the reviewer and future readers,
  why you deem it necessary.

*Variables:*
- Use =camelCase= for naming variables
- Constants are =SCREAMING_SNAKE_CASE=
- In all other variables, do not use =hyp-hens= or =under_scores=
- Variable names start with a letter
- Names are clear and descriptive (exceptions for iterators can be
  made, if not overused)
- Always declare variables
- Reduce global variables as far as possible

*Spaces and blank lines:*
- Blank lines improve readability by setting off sections of code that
  are logically related.

*If-statements:*
- Always use braces, even for one line bodies

#+BEGIN_SRC js
if (true) {
  console.log("I have braces :)");
}
#+END_SRC

** Javascript

*Declarations:*
- Use =const=, if not possible use =let=. Do *not* use =var=.

*Functions:*
- Use functional definitions
  #+BEGIN_SRC js
  const myConstantFunc = (_) => 7
  const mySlightlyMoreComplexFunc = (a, b) => {
    return a + b;
  };
  #+END_SRC
- Parameters follow the same rules as variables
- If a parameter is not used you can use =_= to indicate this

** Adapted from

- [[https://www.w3schools.com/js/js_conventions.asp][W3Schools JavaScript conventions]]
